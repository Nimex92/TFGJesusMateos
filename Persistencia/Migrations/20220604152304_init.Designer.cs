// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(PresenciaContext))]
    [Migration("20220604152304_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClassLibray.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccountCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CIF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("ClassLibray.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BelongCalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Enjoyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BelongCalendarId");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("ClassLibray.EndedTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("OnTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TaskEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskTaskInit")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("TotalTimeUsed")
                        .HasColumnType("double");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("EndedTasks");
                });

            modelBuilder.Entity("ClassLibray.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssueReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("Justified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ClassLibray.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionEvento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ClassLibray.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int?>("NormalHours")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialHours")
                        .HasColumnType("int");

                    b.Property<int?>("TotalToReceive")
                        .HasColumnType("int");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("WorkerPayrolls");
                });

            modelBuilder.Entity("ClassLibray.Places", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ClassLibray.SignedWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SigningId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SigningId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("SignedWorkers");
                });

            modelBuilder.Entity("ClassLibray.Signing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckInCheckOut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("Signings");
                });

            modelBuilder.Entity("ClassLibray.StartedTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TastStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("StartedTasks");
                });

            modelBuilder.Entity("ClassLibray.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("esAdmin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassLibray.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("ClassLibray.Worker", b =>
                {
                    b.Property<int>("CardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BelongstoWorkGroups")
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("HiringDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nif")
                        .HasColumnType("longtext");

                    b.Property<string>("SocialSecurityCard")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("CardNumber");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("ClassLibray.WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("ClassLibray.WorkShift", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Domingo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Friday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Monday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Thursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Name");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("ClassLibray.WorkTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("TaskId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("PlacesWorkGroup", b =>
                {
                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.HasKey("PlacesPlaceId", "WorkGroupsId");

                    b.HasIndex("WorkGroupsId");

                    b.ToTable("PlacesWorkGroup");
                });

            modelBuilder.Entity("WorkGroupWorker", b =>
                {
                    b.Property<int>("WorkGroupId")
                        .HasColumnType("int");

                    b.Property<int>("WorkersCardNumber")
                        .HasColumnType("int");

                    b.HasKey("WorkGroupId", "WorkersCardNumber");

                    b.HasIndex("WorkersCardNumber");

                    b.ToTable("WorkGroupWorker");
                });

            modelBuilder.Entity("WorkGroupWorkShift", b =>
                {
                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.Property<string>("WorkShiftsName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkGroupsId", "WorkShiftsName");

                    b.HasIndex("WorkShiftsName");

                    b.ToTable("WorkGroupWorkShift");
                });

            modelBuilder.Entity("WorkGroupWorkTask", b =>
                {
                    b.Property<int>("TasksTaskId")
                        .HasColumnType("int");

                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.HasKey("TasksTaskId", "WorkGroupsId");

                    b.HasIndex("WorkGroupsId");

                    b.ToTable("WorkGroupWorkTask");
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Day", b =>
                {
                    b.HasOne("ClassLibray.Calendar", "BelongCalendar")
                        .WithMany("DaysOnCalendar")
                        .HasForeignKey("BelongCalendarId");

                    b.Navigation("BelongCalendar");
                });

            modelBuilder.Entity("ClassLibray.EndedTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Issue", b =>
                {
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Payroll", b =>
                {
                    b.HasOne("ClassLibray.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.SignedWorker", b =>
                {
                    b.HasOne("ClassLibray.Signing", "Signing")
                        .WithMany()
                        .HasForeignKey("SigningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signing");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Signing", b =>
                {
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.StartedTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Worker", b =>
                {
                    b.HasOne("ClassLibray.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlacesWorkGroup", b =>
                {
                    b.HasOne("ClassLibray.Places", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorker", b =>
                {
                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorkShift", b =>
                {
                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("WorkShiftsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorkTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.Navigation("DaysOnCalendar");
                });
#pragma warning restore 612, 618
        }
    }
}
