// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(PresenciaContext))]
    partial class PresenciaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClassLibray.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

<<<<<<< HEAD
                    b.Property<string>("Adress")
=======
                    b.Property<int>("TrabajadorNumeroTarjeta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrabajadorNumeroTarjeta");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("Bibliotec.Dia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CalendarioPerteneceId")
                        .HasColumnType("int");

                    b.Property<bool>("Disfrutado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Motivo")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankAccountCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CIF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("ClassLibray.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BelongCalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enjoyed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

<<<<<<< HEAD
                    b.HasKey("Id");

                    b.HasIndex("BelongCalendarId");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("ClassLibray.EndedTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("OnTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TaskEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskTaskInit")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("TotalTimeUsed")
                        .HasColumnType("double");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("EndedTasks");
                });

            modelBuilder.Entity("ClassLibray.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssueReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Justified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WorkerCardNumber")
=======
                    b.Property<int>("TrabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .HasColumnType("int");

                    b.HasKey("Id");

<<<<<<< HEAD
                    b.HasIndex("WorkerCardNumber");
=======
                    b.HasIndex("TrabajadorNumeroTarjeta");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ClassLibray.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionEvento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ClassLibray.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("NormalHours")
                        .HasColumnType("int");

                    b.Property<int>("SpecialHours")
                        .HasColumnType("int");

                    b.Property<int>("TotalToReceive")
                        .HasColumnType("int");

<<<<<<< HEAD
                    b.Property<int>("WorkerCardNumber")
=======
                    b.Property<int>("TrabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

<<<<<<< HEAD
                    b.HasIndex("WorkerCardNumber");
=======
                    b.HasIndex("TrabajadorNumeroTarjeta");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be

                    b.ToTable("WorkerPayrolls");
                });

            modelBuilder.Entity("ClassLibray.Places", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ClassLibray.SignedWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SigningId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SigningId");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("SignedWorkers");
                });

            modelBuilder.Entity("ClassLibray.Signing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckInCheckOut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkerCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerCardNumber");

                    b.ToTable("Signings");
                });

            modelBuilder.Entity("ClassLibray.StartedTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

<<<<<<< HEAD
                    b.Property<DateTime>("TastStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkerCardNumber")
=======
                    b.Property<int>("trabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("TaskId");

<<<<<<< HEAD
                    b.HasIndex("WorkerCardNumber");
=======
                    b.HasIndex("trabajadorNumeroTarjeta");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be

                    b.ToTable("StartedTasks");
                });

<<<<<<< HEAD
            modelBuilder.Entity("ClassLibray.User", b =>
=======
            modelBuilder.Entity("Bibliotec.TareaFinalizada", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EnHora")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FinTarea")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("HorasUsadas")
                        .HasColumnType("double");

                    b.Property<DateTime>("inicioTarea")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("tareaIdTarea")
                        .HasColumnType("int");

                    b.Property<int>("trabajadorNumeroTarjeta")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("tareaIdTarea");

                    b.HasIndex("trabajadorNumeroTarjeta");

                    b.ToTable("TareasFinalizadas");
                });

            modelBuilder.Entity("Bibliotec.Tareas", b =>
                {
                    b.Property<int>("IdTarea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombreTarea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TiempoEstimado")
                        .HasColumnType("double");

                    b.HasKey("IdTarea");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("Bibliotec.Trabajador", b =>
                {
                    b.Property<int>("NumeroTarjeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaDeContratacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroSeguridadSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PerteneceATurnos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioIdUser")
                        .HasColumnType("int");

                    b.HasKey("NumeroTarjeta");

                    b.HasIndex("UsuarioIdUser");

                    b.ToTable("Trabajador");
                });

            modelBuilder.Entity("Bibliotec.TrabajadorEnTurno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("fichajeId")
                        .HasColumnType("int");

                    b.Property<int>("trabajadorNumeroTarjeta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fichajeId");

                    b.HasIndex("trabajadorNumeroTarjeta");

                    b.ToTable("TrabajadorEnTurno");
                });

            modelBuilder.Entity("Bibliotec.Turno", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsDomingo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsJueves")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsLunes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsMartes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsMiercoles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsSabado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsViernes")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("HoraEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HoraSalida")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidoDesde")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidoHasta")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Nombre");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("Bibliotec.Usuarios", b =>
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("esAdmin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassLibray.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

<<<<<<< HEAD
                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("ClassLibray.Worker", b =>
                {
                    b.Property<int>("CardNumber")
                        .ValueGeneratedOnAdd()
=======
                    b.Property<int>("TrabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .HasColumnType("int");

                    b.Property<string>("BelongsToWorkShifts")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("CardNumber");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("ClassLibray.WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

<<<<<<< HEAD
                    b.ToTable("WorkGroups");
=======
                    b.HasIndex("TrabajadorNumeroTarjeta");

                    b.ToTable("Fichajes");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                });

            modelBuilder.Entity("ClassLibray.WorkShift", b =>
                {
<<<<<<< HEAD
                    b.Property<string>("Name")
=======
                    b.Property<int>("EquipoTrabajoId")
                        .HasColumnType("int");

                    b.Property<int>("TareasIdTarea")
                        .HasColumnType("int");

                    b.HasKey("EquipoTrabajoId", "TareasIdTarea");

                    b.HasIndex("TareasIdTarea");

                    b.ToTable("EquipoTrabajoTareas");
                });

            modelBuilder.Entity("EquipoTrabajoTrabajador", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("TrabajadoresNumeroTarjeta")
                        .HasColumnType("int");

                    b.HasKey("EquipoId", "TrabajadoresNumeroTarjeta");

                    b.HasIndex("TrabajadoresNumeroTarjeta");

                    b.ToTable("EquipoTrabajoTrabajador");
                });

            modelBuilder.Entity("EquipoTrabajoTurno", b =>
                {
                    b.Property<int>("EquiposDeTrabajoId")
                        .HasColumnType("int");

                    b.Property<string>("TurnosNombre")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Domingo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Friday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Monday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Thursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Name");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("ClassLibray.WorkTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TaskId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("PlacesWorkGroup", b =>
                {
                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.HasKey("PlacesPlaceId", "WorkGroupsId");

                    b.HasIndex("WorkGroupsId");

                    b.ToTable("PlacesWorkGroup");
                });

            modelBuilder.Entity("WorkGroupWorker", b =>
                {
<<<<<<< HEAD
                    b.Property<int>("WorkGroupId")
                        .HasColumnType("int");
=======
                    b.HasOne("Bibliotec.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorNumeroTarjeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be

                    b.Property<int>("WorkersCardNumber")
                        .HasColumnType("int");

                    b.HasKey("WorkGroupId", "WorkersCardNumber");

                    b.HasIndex("WorkersCardNumber");

                    b.ToTable("WorkGroupWorker");
                });

            modelBuilder.Entity("WorkGroupWorkShift", b =>
                {
                    b.Property<int>("WorkShiftsId")
                        .HasColumnType("int");

                    b.Property<string>("WorkShiftsName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkShiftsId", "WorkShiftsName");

                    b.HasIndex("WorkShiftsName");

                    b.ToTable("WorkGroupWorkShift");
                });

            modelBuilder.Entity("WorkGroupWorkTask", b =>
                {
<<<<<<< HEAD
                    b.Property<int>("TasksTaskId")
                        .HasColumnType("int");
=======
                    b.HasOne("Bibliotec.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorNumeroTarjeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be

                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.HasKey("TasksTaskId", "WorkGroupsId");

                    b.HasIndex("WorkGroupsId");

                    b.ToTable("WorkGroupWorkTask");
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

<<<<<<< HEAD
                    b.Navigation("Worker");
=======
                    b.HasOne("Bibliotec.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorNumeroTarjeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Trabajador");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                });

            modelBuilder.Entity("ClassLibray.Day", b =>
                {
                    b.HasOne("ClassLibray.Calendar", "BelongCalendar")
                        .WithMany("DaysOnCalendar")
                        .HasForeignKey("BelongCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

<<<<<<< HEAD
                    b.Navigation("BelongCalendar");
=======
                    b.HasOne("Bibliotec.Trabajador", "trabajador")
                        .WithMany()
                        .HasForeignKey("trabajadorNumeroTarjeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tarea");

                    b.Navigation("trabajador");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                });

            modelBuilder.Entity("ClassLibray.EndedTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
<<<<<<< HEAD
                        .HasForeignKey("WorkerCardNumber")
=======
                        .HasForeignKey("trabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Issue", b =>
                {
<<<<<<< HEAD
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
=======
                    b.HasOne("Bibliotec.Usuarios", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                });

            modelBuilder.Entity("ClassLibray.Payroll", b =>
                {
                    b.HasOne("ClassLibray.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
<<<<<<< HEAD
                        .HasForeignKey("WorkerCardNumber")
=======
                        .HasForeignKey("trabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.SignedWorker", b =>
                {
                    b.HasOne("ClassLibray.Signing", "Signing")
                        .WithMany()
<<<<<<< HEAD
                        .HasForeignKey("SigningId")
=======
                        .HasForeignKey("TrabajadorNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signing");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Signing", b =>
                {
                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.StartedTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ClassLibray.Worker", b =>
                {
                    b.HasOne("ClassLibray.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlacesWorkGroup", b =>
                {
                    b.HasOne("ClassLibray.Places", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorker", b =>
                {
<<<<<<< HEAD
                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersCardNumber")
=======
                    b.HasOne("Bibliotec.EquipoTrabajo", null)
                        .WithMany()
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bibliotec.Trabajador", null)
                        .WithMany()
                        .HasForeignKey("TrabajadoresNumeroTarjeta")
>>>>>>> fb0fc5fb889192d67c03416bb018ef984a3d00be
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorkShift", b =>
                {
                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("WorkShiftsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkGroupWorkTask", b =>
                {
                    b.HasOne("ClassLibray.WorkTask", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibray.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibray.Calendar", b =>
                {
                    b.Navigation("DaysOnCalendar");
                });
#pragma warning restore 612, 618
        }
    }
}
